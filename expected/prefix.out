set client_min_messages = warning;
create table prefixes (
       prefix    text primary key,
       name      text not null,
       shortname text,
       state     char default 'S',
       check( state in ('S', 'R') )
);
comment on column prefixes.state is 'S: assigned - R: reserved';
\copy prefixes from 'prefixes.fr.csv' with delimiter ';' csv quote '"'
create table ranges as select prefix::prefix_range, name, shortname, state from prefixes ;
create index idx_prefix on ranges using gist(prefix gist_prefix_range_ops);
analyze ranges;
set enable_seqscan to off;
select * from ranges where prefix @> '0146640123';
 prefix |      name      | shortname | state 
--------+----------------+-----------+-------
 0146   | FRANCE TELECOM | FRTE      | S
(1 row)

select * from ranges where prefix @> '0100091234';
 prefix |    name    | shortname | state 
--------+------------+-----------+-------
 010009 | LONG PHONE | LGPH      | S
(1 row)

set enable_seqscan to on;
select * from ranges where prefix @> '0146640123';
 prefix |      name      | shortname | state 
--------+----------------+-----------+-------
 0146   | FRANCE TELECOM | FRTE      | S
(1 row)

select * from ranges where prefix @> '0100091234';
 prefix |    name    | shortname | state 
--------+------------+-----------+-------
 010009 | LONG PHONE | LGPH      | S
(1 row)

select a, b, pr_penalty(a::prefix_range, b::prefix_range)
  from (values('095[4-5]', '0[8-9]'),
              ('095[4-5]', '0[0-9]'),
              ('095[4-5]', '[0-3]'),
              ('095[4-5]', '0'),
              ('095[4-5]', '[0-9]'),
              ('095[4-5]', '0[1-5]'),
              ('095[4-5]', '32'),
              ('095[4-5]', '[1-3]')) as t(a, b)
order by 3 asc;
    a     |   b    | pr_penalty  
----------+--------+-------------
 095[4-5] | 0[8-9] | 1.52588e-05
 095[4-5] | 0[0-9] | 1.52588e-05
 095[4-5] | [0-3]  |  0.00390625
 095[4-5] | 0      |  0.00390625
 095[4-5] | [0-9]  |  0.00390625
 095[4-5] | 0[1-5] |   0.0078125
 095[4-5] | 32     |           1
 095[4-5] | [1-3]  |           1
(8 rows)

create table numbers(number text primary key);
select setseed(0);
 setseed 
---------
 
(1 row)

insert into numbers
  select '01' || to_char((random()*100)::int, 'FM09')
              || to_char((random()*100)::int, 'FM09')
              || to_char((random()*100)::int, 'FM09')
              || to_char((random()*100)::int, 'FM09')
   from generate_series(1, 5000);
analyze numbers;
select count(*) from numbers n join ranges r on r.prefix @> n.number;
 count 
-------
  2027
(1 row)

reset client_min_messages;
